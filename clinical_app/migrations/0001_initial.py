# Generated by Django 5.2.3 on 2025-07-03 09:26

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateTimeField()),
                ('reason_for_visit', models.TextField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('rescheduled', 'Rescheduled'), ('no_show', 'No Show')], default='scheduled', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-appointment_date'],
            },
        ),
        migrations.CreateModel(
            name='Bed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bed_number', models.CharField(max_length=20)),
                ('is_occupied', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Administrator'), ('doctor', 'Doctor'), ('nurse', 'Nurse'), ('pharmacist', 'Pharmacist'), ('lab_tech', 'Lab Technician'), ('radiologist', 'Radiologist'), ('patient', 'Patient'), ('receptionist', 'Receptionist')], default='patient', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='clinical_app_user_set', related_query_name='clinical_app_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='clinical_app_user_permissions_set', related_query_name='clinical_app_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ImagingType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LabTestCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Lab Test Categories',
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('strength', models.CharField(blank=True, max_length=50, null=True)),
                ('form', models.CharField(blank=True, max_length=50, null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True)),
                ('price_per_unit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Ward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('ward_type', models.CharField(choices=[('general', 'General'), ('private', 'Private'), ('icu', 'Intensive Care Unit'), ('maternity', 'Maternity'), ('pediatric', 'Pediatric'), ('oncology', 'Oncology')], default='general', max_length=50)),
                ('capacity', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'doctor'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='clinical_app.user')),
                ('specialization', models.CharField(max_length=100)),
                ('medical_license_number', models.CharField(max_length=50, unique=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.department')),
            ],
        ),
        migrations.CreateModel(
            name='Nurse',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'nurse'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='clinical_app.user')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'patient'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='clinical_app.user')),
                ('patient_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, null=True)),
                ('emergency_contact_name', models.CharField(max_length=100)),
                ('emergency_contact_phone', models.CharField(max_length=20)),
                ('allergies', models.TextField(blank=True, help_text='List known allergies (e.g., medications, food)', null=True)),
                ('pre_existing_conditions', models.TextField(blank=True, help_text='List any chronic conditions', null=True)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Encounter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encounter_date', models.DateTimeField(auto_now_add=True)),
                ('encounter_type', models.CharField(choices=[('outpatient', 'Outpatient'), ('inpatient', 'Inpatient'), ('emergency', 'Emergency'), ('telemedicine', 'Telemedicine')], default='outpatient', max_length=20)),
                ('admission_date', models.DateTimeField(blank=True, null=True)),
                ('discharge_date', models.DateTimeField(blank=True, null=True)),
                ('appointment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='encounter', to='clinical_app.appointment')),
                ('bed', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.bed')),
                ('ward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.ward')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='encounters', to='clinical_app.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='encounters', to='clinical_app.patient')),
            ],
        ),
        migrations.CreateModel(
            name='ImagingRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_date', models.DateTimeField(auto_now_add=True)),
                ('reason_for_exam', models.TextField()),
                ('body_part', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('scheduled', 'Scheduled'), ('performed', 'Performed'), ('reported', 'Reported'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imaging_requests', to='clinical_app.encounter')),
                ('imaging_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinical_app.imagingtype')),
                ('requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='ImagingResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateTimeField(auto_now_add=True)),
                ('findings', models.TextField()),
                ('impression', models.TextField()),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('image_files', models.FileField(blank=True, null=True, upload_to='imaging_results/')),
                ('radiologist', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'radiologist'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.user')),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='clinical_app.imagingrequest')),
            ],
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('unit', models.CharField(blank=True, max_length=20, null=True)),
                ('normal_range', models.CharField(blank=True, max_length=50, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tests', to='clinical_app.labtestcategory')),
            ],
        ),
        migrations.CreateModel(
            name='LabTestRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_date', models.DateTimeField(auto_now_add=True)),
                ('request_notes', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_test_requests', to='clinical_app.encounter')),
                ('tests', models.ManyToManyField(to='clinical_app.labtest')),
                ('requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='LabTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_value', models.CharField(blank=True, max_length=255, null=True)),
                ('result_unit', models.CharField(blank=True, max_length=20, null=True)),
                ('normal_range_at_time_of_test', models.CharField(blank=True, max_length=50, null=True)),
                ('is_abnormal', models.BooleanField(default=False)),
                ('comment', models.TextField(blank=True, null=True)),
                ('result_date', models.DateTimeField(auto_now_add=True)),
                ('result_file', models.FileField(blank=True, null=True, upload_to='lab_results/')),
                ('performed_by', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'lab_tech'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.user')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='clinical_app.labtestrequest')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinical_app.labtest')),
            ],
        ),
        migrations.CreateModel(
            name='VitalSign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='in Celsius', max_digits=4, null=True)),
                ('blood_pressure_systolic', models.IntegerField(blank=True, help_text='Systolic BP (mmHg)', null=True)),
                ('blood_pressure_diastolic', models.IntegerField(blank=True, help_text='Diastolic BP (mmHg)', null=True)),
                ('heart_rate', models.IntegerField(blank=True, help_text='BPM', null=True)),
                ('respiratory_rate', models.IntegerField(blank=True, help_text='Breaths per minute', null=True)),
                ('oxygen_saturation', models.DecimalField(blank=True, decimal_places=1, help_text='%', max_digits=4, null=True)),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in KG', max_digits=6, null=True)),
                ('height_cm', models.DecimalField(blank=True, decimal_places=2, help_text='Height in CM', max_digits=6, null=True)),
                ('bmi', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='clinical_app.encounter')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.user')),
            ],
        ),
        migrations.AddField(
            model_name='bed',
            name='ward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='beds', to='clinical_app.ward'),
        ),
        migrations.CreateModel(
            name='TreatmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('treatment_description', models.TextField()),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('expected_return_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('discontinued', 'Discontinued')], default='active', max_length=20)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='clinical_app.encounter')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_date', models.DateTimeField(auto_now_add=True)),
                ('dosage', models.CharField(max_length=100)),
                ('frequency', models.CharField(max_length=100)),
                ('duration', models.CharField(max_length=100)),
                ('route', models.CharField(blank=True, max_length=50, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('is_dispensed', models.BooleanField(default=False)),
                ('dispensed_date', models.DateTimeField(blank=True, null=True)),
                ('dispensed_by', models.ForeignKey(blank=True, limit_choices_to={'user_type': 'pharmacist'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medications_dispensed', to='clinical_app.user')),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='clinical_app.encounter')),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinical_app.medication')),
                ('prescribed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='PhysicalExamination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('examination_date', models.DateTimeField(auto_now_add=True)),
                ('general_appearance', models.TextField(blank=True, null=True)),
                ('head_and_neck', models.TextField(blank=True, null=True)),
                ('chest_and_lungs', models.TextField(blank=True, null=True)),
                ('heart_and_circulation', models.TextField(blank=True, null=True)),
                ('abdomen', models.TextField(blank=True, null=True)),
                ('musculoskeletal', models.TextField(blank=True, null=True)),
                ('neurological', models.TextField(blank=True, null=True)),
                ('skin', models.TextField(blank=True, null=True)),
                ('other_findings', models.TextField(blank=True, null=True)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='physical_examinations', to='clinical_app.encounter')),
                ('examined_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis_date', models.DateTimeField(auto_now_add=True)),
                ('icd10_code', models.CharField(blank=True, max_length=20, null=True)),
                ('diagnosis_text', models.TextField()),
                ('is_primary', models.BooleanField(default=False)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagnoses', to='clinical_app.encounter')),
                ('diagnosed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.doctor')),
            ],
            options={
                'verbose_name_plural': 'Diagnoses',
            },
        ),
        migrations.CreateModel(
            name='CaseSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary_text', models.TextField()),
                ('summary_date', models.DateTimeField(auto_now_add=True)),
                ('digital_signature_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('encounter', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='case_summary', to='clinical_app.encounter')),
                ('prepared_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.doctor')),
            ],
            options={
                'verbose_name_plural': 'Case Summaries',
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='clinical_app.doctor'),
        ),
        migrations.CreateModel(
            name='MortalityRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_death', models.DateTimeField()),
                ('cause_of_death', models.TextField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('death_certified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.doctor')),
                ('patient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mortality_record', to='clinical_app.patient')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_date', models.DateTimeField(auto_now_add=True)),
                ('chief_complaint', models.TextField(blank=True, null=True)),
                ('history_of_present_illness', models.TextField(blank=True, null=True)),
                ('past_medical_history', models.TextField(blank=True, null=True)),
                ('surgical_history', models.TextField(blank=True, null=True)),
                ('family_history', models.TextField(blank=True, null=True)),
                ('social_history', models.TextField(blank=True, null=True)),
                ('medication_history', models.TextField(blank=True, null=True)),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_history_entries', to='clinical_app.patient')),
            ],
        ),
        migrations.CreateModel(
            name='ConsentForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consent_type', models.CharField(max_length=100)),
                ('consent_text', models.TextField()),
                ('is_signed', models.BooleanField(default=False)),
                ('signed_date', models.DateTimeField(blank=True, null=True)),
                ('digital_signature_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('document_file', models.FileField(blank=True, null=True, upload_to='consent_forms/')),
                ('signed_by_staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consents_obtained', to='clinical_app.user')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consent_forms', to='clinical_app.patient')),
            ],
        ),
        migrations.CreateModel(
            name='BirthRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baby_name', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateTimeField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('weight_kg', models.DecimalField(decimal_places=2, max_digits=5)),
                ('height_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('apgar_score_1min', models.IntegerField(blank=True, null=True)),
                ('apgar_score_5min', models.IntegerField(blank=True, null=True)),
                ('mode_of_delivery', models.CharField(blank=True, max_length=50, null=True)),
                ('delivery_notes', models.TextField(blank=True, null=True)),
                ('is_multiple_birth', models.BooleanField(default=False)),
                ('delivered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deliveries', to='clinical_app.doctor')),
                ('patient', models.OneToOneField(help_text="Link to the mother's patient record", on_delete=django.db.models.deletion.CASCADE, related_name='birth_record', to='clinical_app.patient')),
            ],
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='clinical_app.patient'),
        ),
        migrations.AlterUniqueTogether(
            name='bed',
            unique_together={('ward', 'bed_number')},
        ),
        migrations.CreateModel(
            name='CancerRegistryReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateField(default=datetime.date.today)),
                ('cancer_type', models.CharField(max_length=255)),
                ('stage', models.CharField(blank=True, max_length=50, null=True)),
                ('treatment_modalities', models.TextField(blank=True, help_text='e.g., Surgery, Chemotherapy, Radiotherapy', null=True)),
                ('date_of_diagnosis', models.DateField(blank=True, null=True)),
                ('date_of_last_follow_up', models.DateField(blank=True, null=True)),
                ('vital_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead')], default='alive', max_length=10)),
                ('date_of_death', models.DateField(blank=True, null=True)),
                ('cause_of_death', models.TextField(blank=True, null=True)),
                ('reported_to_registry', models.BooleanField(default=False)),
                ('registry_submission_date', models.DateTimeField(blank=True, null=True)),
                ('diagnosis', models.ForeignKey(blank=True, help_text='Link to the specific cancer diagnosis', null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.diagnosis')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cancer_registry_reports', to='clinical_app.patient')),
            ],
            options={
                'verbose_name_plural': 'Cancer Registry Reports',
                'unique_together': {('patient', 'diagnosis', 'report_date')},
            },
        ),
    ]
